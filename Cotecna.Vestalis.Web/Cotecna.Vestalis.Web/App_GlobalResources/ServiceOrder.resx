<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BeginDateValue" xml:space="preserve">
    <value>Begin date must have a value</value>
  </data>
  <data name="ComboBoxUserDefaultOption" xml:space="preserve">
    <value>Select One User</value>
  </data>
  <data name="DateRule" xml:space="preserve">
    <value>Begin date must be less than end date</value>
  </data>
  <data name="DeleteServiceOrder" xml:space="preserve">
    <value>Are you sure to delete the service order?</value>
  </data>
  <data name="DigitsValidationMessage" xml:space="preserve">
    <value>Please write only digits</value>
  </data>
  <data name="EditServiceOrder" xml:space="preserve">
    <value>Edit service order</value>
  </data>
  <data name="EndDateValue" xml:space="preserve">
    <value>End date must have a value</value>
  </data>
  <data name="ErrorFieldDateIncorrect" xml:space="preserve">
    <value>The field {0} has incorrect format. The correct format is dd/mm/yyyy</value>
  </data>
  <data name="ErrorFieldDateRuleEndDate" xml:space="preserve">
    <value>The field {0} is greater than {1}</value>
  </data>
  <data name="ErrorFieldDateRuleStartDate" xml:space="preserve">
    <value>The field {0} is less than {1}</value>
  </data>
  <data name="ErrorFieldNumericIncorrect" xml:space="preserve">
    <value>The field {0} is not a valid number.</value>
  </data>
  <data name="ErrorFieldRegularExpression" xml:space="preserve">
    <value>The field {0} doesn't match with the pattern {1}</value>
  </data>
  <data name="ErrorFieldRequired" xml:space="preserve">
    <value>The field {0} is required</value>
  </data>
  <data name="ErrorFieldTextMaxLength" xml:space="preserve">
    <value>The field {0} exceeds the maximum number of characters</value>
  </data>
  <data name="ErrorFieldTextMaxValue" xml:space="preserve">
    <value>The field {0} is greater than {1}</value>
  </data>
  <data name="ErrorFieldTextMinLength" xml:space="preserve">
    <value>The field {0} is less than the minimum number of characters</value>
  </data>
  <data name="ErrorFieldTextMinValue" xml:space="preserve">
    <value>The field {0} is less than {1}</value>
  </data>
  <data name="ErrorFieldTextNumDigit" xml:space="preserve">
    <value>The field {0} has incorrect number of digits</value>
  </data>
  <data name="InstructionGeneral" xml:space="preserve">
    <value>Fill in the form to order an inspection&amp;nbsp;&amp;nbsp;&amp;nbsp;* indicate mandatory fields</value>
  </data>
  <data name="MandatoryFieldValidationMessage" xml:space="preserve">
    <value>Mandatory field. Please enter a value</value>
  </data>
  <data name="MaxValueValidationMessage" xml:space="preserve">
    <value>Please write a value less than {0}</value>
  </data>
  <data name="MinLengthValidationMessage" xml:space="preserve">
    <value>Please, at least {0} characters are necessary</value>
  </data>
  <data name="MinValueValidationMessage" xml:space="preserve">
    <value>Please write a value grater than {0}</value>
  </data>
  <data name="NewServiceOrder" xml:space="preserve">
    <value>New service order</value>
  </data>
  <data name="NumbersValidationMessage" xml:space="preserve">
    <value>Please write only digists</value>
  </data>
  <data name="RegularExpressionErrorMessage" xml:space="preserve">
    <value>Please specify a correct input</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SelectionNotValidMessage" xml:space="preserve">
    <value>Please select a valid value</value>
  </data>
  <data name="ServiceOrderListSearchSection" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="ServiceOrderListTitle" xml:space="preserve">
    <value>Service Order List</value>
  </data>
  <data name="ServiceOrderListTitleLegend" xml:space="preserve">
    <value>Please enter your search criteria:</value>
  </data>
  <data name="ServiceOrderTitle" xml:space="preserve">
    <value>Service Orders</value>
  </data>
  <data name="SummatoryRule" xml:space="preserve">
    <value>The sum of the values is different of the expected value</value>
  </data>
  <data name="TimeValidadtionMessage" xml:space="preserve">
    <value>Please specify the correct 24h time</value>
  </data>
  <data name="ViewServiceOrder" xml:space="preserve">
    <value>View service order</value>
  </data>
  <data name="ServiceOrderNumber" xml:space="preserve">
    <value>Service Order {0}</value>
  </data>
  <data name="ServiceOrderMenu" xml:space="preserve">
    <value>Service Order</value>
  </data>
  <data name="InspectionReportsChooseInstruction" xml:space="preserve">
    <value>Choose one or more reports for exporting to excel</value>
  </data>
  <data name="InspectionReportsChooseTitle" xml:space="preserve">
    <value>Inspection reports</value>
  </data>
  <data name="GenerateServiceOrderReport" xml:space="preserve">
    <value>Generate service order report</value>
  </data>
  <data name="GenerateReportMessage" xml:space="preserve">
    <value>Please choose at least one option for generating the report.</value>
  </data>
</root>