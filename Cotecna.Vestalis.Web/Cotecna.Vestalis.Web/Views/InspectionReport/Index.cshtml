@using Cotecna.Vestalis.Core;
@using Cotecna.Vestalis.Web.Common

@{
    ViewBag.Title = "Vestalis" ;     
}



@model InspectionReportModel

@section headerContent{
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/themes/base/jquery-ui.css")" media="screen,print" />
    <link rel="stylesheet" type="text/css" href="@Url.Content("~/Content/jquery.ui.selectmenu.css")" media="screen,print" />
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery-ui-1.8.20.min.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.ui.selectmenu.js")"></script>
    @*Used for comboboxes*@
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.ezmark.min.js")"></script>
    @*Used for radios and checks*@
    <script type="text/javascript" src="@Url.Content("~/Scripts/jquery.validate.js")"></script>
            @*Used for lightbox efect*@
    <script src="@Url.Content("~/Scripts/lightboxLargeRoute.js")" type="text/javascript"></script>
    <link href="@Url.Content("~/Content/lightbox.css")" rel="stylesheet" />

}
@Html.Partial("_ConfirmationMessage")

@{
    string orderNumber = Model.OrderIdentifier == null || String.IsNullOrEmpty(Model.OrderIdentifier.FieldValue)
                                     ? Resources.Common.ServiceOrderUndefined
                                     : Model.OrderIdentifier.FieldValue;
                                     
    string serviceOrderNumber = string.Format(Model.CaptionBreadcrumbsPrincipal +" {0}", orderNumber);
    string inspectionTitle = string.Format("{0} {1} - {2}",Model.CaptionBreadcrumbsPrincipal ,orderNumber,Model.GridColumns.FormName);
}
<div id="Breadcrumbs">
    <div class="cap-left">
    </div>
    
    <ul>
        <li>@Html.ActionLink(Model.CaptionTitlePrincipal, "Index", "ServiceOrder") &gt;</li>
@if (User.IsInRole("Client"))
{
        <li>@Html.ActionLink(serviceOrderNumber, "ViewServiceOrder", "ServiceOrder") &gt;</li>
}
else
{
        <li>@Html.ActionLink(serviceOrderNumber, "EditServiceOrder", "ServiceOrder") &gt;</li>
}
        <li class="last">@Model.GridColumns.FormName</li>
    </ul>
    
    <div class="cap-right">
    </div>
</div>

@{
    string dataSent = "";
    dataSent += "InspectionReportId:'" + Model.InspectionReportName + "',";
    string fieldsWithLike = "";


foreach (var filter in Model.GridColumns.Filters)
{
    var htmlIdentifierValue = filter.FieldName;

    if (filter == Model.GridColumns.Filters.Last())
    {

        if (filter.FieldType == FieldType.Datepicker)
        {
            htmlIdentifierValue = htmlIdentifierValue + "to";
            dataSent = dataSent + String.Format(" {0}:$('#{1}').val(),", htmlIdentifierValue, htmlIdentifierValue);
            htmlIdentifierValue = filter.FieldName + "from";
            dataSent = dataSent + String.Format(" {0}:$('#{1}').val()", htmlIdentifierValue, htmlIdentifierValue);
        }
        else
        {
            dataSent = dataSent + String.Format(" {0}:$('#{1}').val()", htmlIdentifierValue, htmlIdentifierValue);
        }
    }
    else
    {
        if (filter.FieldType == FieldType.Datepicker)
        {
            htmlIdentifierValue = htmlIdentifierValue + "to";
            dataSent = dataSent + String.Format(" {0}:$('#{1}').val(),", htmlIdentifierValue, htmlIdentifierValue);
            htmlIdentifierValue = filter.FieldName + "from";
            dataSent = dataSent + String.Format(" {0}:$('#{1}').val(),", htmlIdentifierValue, htmlIdentifierValue);
        }
        else
        {
            dataSent = dataSent + String.Format(" {0}:$('#{1}').val(),", htmlIdentifierValue, htmlIdentifierValue);
        }
    }
}

foreach (var filter in Model.GridColumns.Filters.Where(data => data.IsLikeSearch))
{
    if (Model.GridColumns.Filters.Where(data => data.IsLikeSearch).Last() == filter)
    {
        fieldsWithLike += string.Format("IsLike{0}:true", filter.FieldName);
    }
    else
    {
        fieldsWithLike += string.Format("IsLike{0}:true,", filter.FieldName);
    }
}

if(!string.IsNullOrEmpty(fieldsWithLike))
{
    dataSent = dataSent + "," + fieldsWithLike;
}

if(dataSent.Last() == ',')
{
    dataSent = dataSent.Remove(dataSent.LastIndexOf(','), 1);
}

}

<script type="text/javascript">

    function UpdateResults(results) {
        if (results.indexOf('gridArea') != -1) {
            $(".gridArea").html(results);
            $(".gridArea").fadeIn("slow");
        }
        else {
            $("#formError").submit();
        }
    }
    
   
    $(function () {

        $("#resetButton").click(function () {
            $("#InspectionReportId").val('@Model.GridColumns.FormName');
            $("#InspectionReports").submit();
        });

        $("#searchButton").click(function () {
            var ajaxUrl = '@Url.Action("SearchInspectionReport", "InspectionReport")';
            
            $.ajax({
                url: ajaxUrl,
                type: 'POST',
                dataType: 'html',
                success: UpdateResults,
                error: function () { alert('An error occurred') },
                data:{@Html.Raw(dataSent)}
            });
        });

        
    });

    $(document).ready(function(){

        $("#liServicerOrderMenu").attr("class", "first current");
        $("#serviceOrderLink").html("@Model.PrincipalFormName");


         var ajaxUrl = '@Url.Action("SearchInspectionReport", "InspectionReport")';
            
            $.ajax({
                url: ajaxUrl,
                type: 'POST',
                dataType: 'html',
                success: UpdateResults,
                error: function () { alert('An error occurred') },
                data:{@Html.Raw(dataSent)}
            });
    });

    function ExportToExcel(){

        var ajaxUrl = '@Url.Action("SearchInfoInspectionReport", "InspectionReport")';
            
        $.ajax({
            url: ajaxUrl,
            type: 'POST',
            dataType: 'json',
            success: function(response){
                if(response){
                    $("#exportExcel").submit();
                }
                else {
                    $("#formError").submit();
                }
            },
            error: function () { $("#formError").submit();  },
            data:{@Html.Raw(dataSent)}
        });

    }

    

        function LaunchPublishValidateInspectionReport(rowId) {
        var ajaxUrl = '@Url.Action("PublishValidateInspectionReport", "InspectionReport")';
           $.ajax({
                    url: ajaxUrl,
                    type: 'POST',
                    dataType: 'html',
                    success: UpdateResults,
                    error: function () { alert('An error occurred') },
                    data:{inspectionReportItemId: rowId, @Html.Raw(dataSent)}
                });  
        }

        function LaunchUnPublishInspectionReport(rowId) {
        var ajaxUrl = '@Url.Action("UnPublishInspectionReport", "InspectionReport")';
           $.ajax({
                    url: ajaxUrl,
                    type: 'POST',
                    dataType: 'html',
                    success: UpdateResults,
                    error: function () { alert('An error occurred') },
                    data:{inspectionReportItemId: rowId, @Html.Raw(dataSent)}
                });  
        }

        function PublishValidateSelectedInspectionReport(message,title,option,ids) {
        ShowMessage(message,title, function () {
            var ajaxUrl = '@Url.Action("PublishValidateSelectedInspectionReports", "InspectionReport")';
           $.ajax({
                    url: ajaxUrl,
                    type: 'POST',
                    dataType: 'html',
                    success: UpdateResults,
                    error: function () { alert('An error occurred') },
                    data:{selectedOption: option, @Html.Raw(dataSent),selectedInspectionReports: ids}
                });
        });  
        }
</script>



@section businessApplications{
    @Html.Partial("_BusinessApplicationSelection")            

}


@section leftmenu {
@Html.Partial("_LeftMenuOrder", Model.Links)
}


<h1>@inspectionTitle</h1>
<p>@Resources.ServiceOrder.ServiceOrderListTitleLegend</p>
@Html.Partial("_InspectionReportHeader", Model.ServiceOrderHeader)

<div class="form">


    @if (Model.GridColumns.Filters != null && Model.GridColumns.Filters.Count > 0)
    {
    
    <div class="legend">        
        <span>&nbsp;</span>
        @Resources.Common.SearchCriteria
    </div>
    <ol>
    @foreach (var filter in Model.GridColumns.Filters)
    {
        var htmlIdentifier = filter.FieldName;

        if (filter.FieldType == FieldType.Datepicker)
        {
            FieldsDatepickerField dateField = filter as FieldsDatepickerField;
            var htmlIdentifierFrom = htmlIdentifier + "from";
            var htmlIdentifierTo = htmlIdentifier + "to";

            string captionFrom = dateField.Caption + " " + Resources.Common.From;
            string captionTo = filter.Caption + " " + Resources.Common.To;

               
                <li class="datehalf">
                <label>
                    <span class="name">@captionFrom</span>
                    <script type="text/javascript">
                        $(function () {
                            $("#@htmlIdentifierFrom").datepicker({
                                showOn: "button",
                                buttonImage: '@Url.Content("~/Images/date.png")',
                                buttonImageOnly: true,
                                dateFormat: "dd/mm/yy",
                                firstDay: 1
                            });
                        });
                </script>
                @{
            DateTime dateFrom;
            string dateFromValue = string.Empty;
            if (!string.IsNullOrEmpty(dateField.StartDateFilter))
            {
                if (dateField.StartDateFilter.Contains("today"))
                {
                    if (dateField.StartDateFilter.Contains("-"))
                    {
                        string[] startDateFilterValues = dateField.StartDateFilter.Split('-');
                        dateFrom = DateTime.Now.AddDays((int.Parse(startDateFilterValues[1]) * -1));
                        dateFromValue = string.Format("{0:dd/MM/yyyy}", dateFrom);    
                                <input id="@htmlIdentifierFrom" type="text" class="txt" name="@htmlIdentifierFrom" value="@dateFromValue" disabled="disabled"/>
                    }
                    else if (dateField.StartDateFilter.Contains("+"))
                    {
                        string[] startDateFilterValues = dateField.StartDateFilter.Split('+');
                        dateFrom = DateTime.Now.AddDays(int.Parse(startDateFilterValues[1]));
                        dateFromValue = string.Format("{0:dd/MM/yyyy}", dateFrom);    
                                <input id="@htmlIdentifierFrom" type="text" class="txt" name="@htmlIdentifierFrom" value="@dateFromValue" disabled="disabled"/>
                    }
                    else
                    {
                        dateFromValue = string.Format("{0:dd/MM/yyyy}", DateTime.Now);    
                                <input id="@htmlIdentifierFrom" type="text" class="txt" name="@htmlIdentifierFrom" value="@dateFromValue" disabled="disabled"/>
                    }
                }
                else
                {    
                            <input id="@htmlIdentifierFrom" type="text" class="txt" name="@htmlIdentifierFrom" value="@dateField.StartDateFilter" disabled="disabled"/>
                }
            }
            else
            {
                        <input id="@htmlIdentifierFrom" type="text" class="txt" name="@htmlIdentifierFrom" disabled="disabled"/>
            }
                }
                </label>
                </li>
        
        <li class="datehalf">
                <label>
                    <span class="name">@captionTo</span>
                    <script>
                        $(function () {
                            $("#@htmlIdentifierTo").datepicker({
                                showOn: "button",
                                buttonImage: '@Url.Content("~/Images/date.png")',
                                buttonImageOnly: true,
                                dateFormat: "dd/mm/yy",
                                firstDay: 1
                            });
                        });
                </script>
                @{
                    
            DateTime dateTo;
            string dateToValue = string.Empty;
            if (!string.IsNullOrEmpty(dateField.EndDateFilter))
            {
                if (dateField.EndDateFilter.Contains("today"))
                {
                    if (dateField.EndDateFilter.Contains("-"))
                    {
                        string[] endDateFilterValues = dateField.EndDateFilter.Split('-');
                        dateFrom = DateTime.Now.AddDays((int.Parse(endDateFilterValues[1]) * -1));
                        dateFromValue = string.Format("{0:dd/MM/yyyy}", dateFrom);    
                                <input id="@htmlIdentifierTo" type="text" class="txt" name="@htmlIdentifierFrom" value="@dateFromValue" disabled="disabled"/>
                    }
                    else if (dateField.StartDateFilter.Contains("+"))
                    {
                        string[] endDateFilterValues = dateField.EndDateFilter.Split('+');
                        dateFrom = DateTime.Now.AddDays(int.Parse(endDateFilterValues[1]));
                        dateFromValue = string.Format("{0:dd/MM/yyyy}", dateFrom);    
                                <input id="@htmlIdentifierTo" type="text" class="txt" name="@htmlIdentifierFrom" value="@dateFromValue" disabled="disabled"/>
                    }
                    else
                    {
                        dateToValue = string.Format("{0:dd/MM/yyyy}", DateTime.Now);
                                <input id="@htmlIdentifierTo" type="text" class="txt" name="@htmlIdentifierTo" value="@dateToValue" disabled="disabled"/>
                    }
                }
                else
                {    
                            <input id="@htmlIdentifierTo" type="text" class="txt" name="@htmlIdentifierFrom" value="@dateField.EndDateFilter" disabled="disabled"/>
                }
            }
            else
            {
                        <input id="@htmlIdentifierTo" type="text" class="txt" name="@htmlIdentifierFrom" disabled="disabled"/>
            }
                }
                </label>
            </li>
        }
        else
        {
            <li>
                <label>
                    <span class="name">@filter.Caption</span>
            @switch (filter.FieldType)
            {
                case FieldType.Catalogue:
                    FieldsCatalogueField catalogueField = filter as FieldsCatalogueField;

                    if (catalogueField.IsLikeSearch)
                    {
                        <input id="@htmlIdentifier" name="@htmlIdentifier" type="text" class="txt"/>
                    }
                    else
                    {
                        switch (catalogueField.EditorType)
                        {
                            case FieldsCatalogueFieldEditorType.DropDownList:
                                    @Html.DropDownList(filter.FieldName, catalogueField.ItemsSource, Resources.Common.SelectOneOption)
                               break;
                            case FieldsCatalogueFieldEditorType.List:
                                    @Html.ListBox(filter.FieldName, catalogueField.ItemsSource)
                               break;
                            case FieldsCatalogueFieldEditorType.Radios:
                               foreach (var item in catalogueField.ItemsSource)
                               {                                    
                                        @Html.RadioButton(filter.FieldName, item.Value, item.Selected)
                                        <span>@item.Text</span> 
                                        <text>&nbsp&nbsp&nbsp</text>
                               }
                               break;
                            default:
                               break;
                        }
                    }
                    
                    break;
                case FieldType.SingleTextLine:
                    FieldsSingleTextLineField singleTextField = filter as FieldsSingleTextLineField;

                      <input id="@htmlIdentifier" type="text" class="txt" name="@htmlIdentifier"/>
                    break;
                case FieldType.MultipleTextLine:
                                                                           FieldsMultipleTextLineField multiTextField = filter as FieldsMultipleTextLineField;
                    <textarea id="@htmlIdentifier" rows="4" cols="50" name="@htmlIdentifier"></textarea>
                    break;
                case FieldType.AutoComplete:
                    <input id="@htmlIdentifier" type="text" class="txt" name="@htmlIdentifier"/>
                                                                         break;
                case FieldType.Boolean:
                    <input id="@htmlIdentifier" type="checkbox" class="txt" name="@htmlIdentifier" checked="checked" />
                                                                             break;
                case FieldType.Time:
                                                                             FieldsTimeField timeField = filter as FieldsTimeField;
                    <input id="@htmlIdentifier" type="text" class="txt" name="@htmlIdentifier"/>
                                                                         break;
                case FieldType.Integer:
                    <input id="@htmlIdentifier" type="text" class="txt" name="@htmlIdentifier"/>
                                                                         break;
                case FieldType.Decimal:
                    <input id="@htmlIdentifier" type="text" class="txt" name="@htmlIdentifier"/>
                                                                         break;
                case FieldType.RegularExpressionText:
                    <input id="@htmlIdentifier" type="text" class="txt" name="@htmlIdentifier"/>
                                                                         break;
                case FieldType.User:
                                                                         FieldsUserField userField = filter as FieldsUserField;
                    @Html.DropDownList(filter.FieldName, userField.ItemsSource, "Select One User")
               break;
                case FieldType.Datepicker:
               FieldsDatepickerField dateField = filter as FieldsDatepickerField;
                    <script type="text/javascript">
                        $(function () {
                            $("#@htmlIdentifier").datepicker({
                                showOn: "button",
                                buttonImage: '@Url.Content("~/Images/date.png")',
                                buttonImageOnly: true,
                                dateFormat: "dd/mm/yy",
                                firstDay: 1
                            });
                        });
                </script>
                <input id="@htmlIdentifier" type="text" class="txt" name="@htmlIdentifier"/>
                                                                     break;
                default:
                                                                     break;
            }

                </label>
            </li>
        }
    }
             
    </ol>
    }
</div>
@if (Model.GridColumns.Filters != null && Model.GridColumns.Filters.Count > 0)
{
    <p class="btn">
        <span class="btn">
            <input type="submit" value="@Resources.Common.Search" id="searchButton" />
        </span>
        <span class="btn2">
            <input type="reset" value="@Resources.Common.Reset" id="resetButton" />
        </span>
    </p>
}
<div class="gridArea">
    @Html.Partial("_InspectionReportGrid", Model.GridColumns)
</div>
<form id="exportExcel" action="@Url.Action("ExportExcel", "InspectionReport")" method="post">
    
</form>